// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: app/router/command/command.proto
// </auto-generated>
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Xray.App.Router.Command {
  public static partial class RoutingService
  {
    static readonly string __ServiceName = "xray.app.router.command.RoutingService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Xray.App.Router.Command.SubscribeRoutingStatsRequest> __Marshaller_xray_app_router_command_SubscribeRoutingStatsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Xray.App.Router.Command.SubscribeRoutingStatsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Xray.App.Router.Command.RoutingContext> __Marshaller_xray_app_router_command_RoutingContext = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Xray.App.Router.Command.RoutingContext.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Xray.App.Router.Command.TestRouteRequest> __Marshaller_xray_app_router_command_TestRouteRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Xray.App.Router.Command.TestRouteRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Xray.App.Router.Command.GetBalancerInfoRequest> __Marshaller_xray_app_router_command_GetBalancerInfoRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Xray.App.Router.Command.GetBalancerInfoRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Xray.App.Router.Command.GetBalancerInfoResponse> __Marshaller_xray_app_router_command_GetBalancerInfoResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Xray.App.Router.Command.GetBalancerInfoResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Xray.App.Router.Command.OverrideBalancerTargetRequest> __Marshaller_xray_app_router_command_OverrideBalancerTargetRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Xray.App.Router.Command.OverrideBalancerTargetRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Xray.App.Router.Command.OverrideBalancerTargetResponse> __Marshaller_xray_app_router_command_OverrideBalancerTargetResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Xray.App.Router.Command.OverrideBalancerTargetResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Xray.App.Router.Command.AddRuleRequest> __Marshaller_xray_app_router_command_AddRuleRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Xray.App.Router.Command.AddRuleRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Xray.App.Router.Command.AddRuleResponse> __Marshaller_xray_app_router_command_AddRuleResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Xray.App.Router.Command.AddRuleResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Xray.App.Router.Command.RemoveRuleRequest> __Marshaller_xray_app_router_command_RemoveRuleRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Xray.App.Router.Command.RemoveRuleRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Xray.App.Router.Command.RemoveRuleResponse> __Marshaller_xray_app_router_command_RemoveRuleResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Xray.App.Router.Command.RemoveRuleResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Xray.App.Router.Command.SubscribeRoutingStatsRequest, global::Xray.App.Router.Command.RoutingContext> __Method_SubscribeRoutingStats = new grpc::Method<global::Xray.App.Router.Command.SubscribeRoutingStatsRequest, global::Xray.App.Router.Command.RoutingContext>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "SubscribeRoutingStats",
        __Marshaller_xray_app_router_command_SubscribeRoutingStatsRequest,
        __Marshaller_xray_app_router_command_RoutingContext);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Xray.App.Router.Command.TestRouteRequest, global::Xray.App.Router.Command.RoutingContext> __Method_TestRoute = new grpc::Method<global::Xray.App.Router.Command.TestRouteRequest, global::Xray.App.Router.Command.RoutingContext>(
        grpc::MethodType.Unary,
        __ServiceName,
        "TestRoute",
        __Marshaller_xray_app_router_command_TestRouteRequest,
        __Marshaller_xray_app_router_command_RoutingContext);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Xray.App.Router.Command.GetBalancerInfoRequest, global::Xray.App.Router.Command.GetBalancerInfoResponse> __Method_GetBalancerInfo = new grpc::Method<global::Xray.App.Router.Command.GetBalancerInfoRequest, global::Xray.App.Router.Command.GetBalancerInfoResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetBalancerInfo",
        __Marshaller_xray_app_router_command_GetBalancerInfoRequest,
        __Marshaller_xray_app_router_command_GetBalancerInfoResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Xray.App.Router.Command.OverrideBalancerTargetRequest, global::Xray.App.Router.Command.OverrideBalancerTargetResponse> __Method_OverrideBalancerTarget = new grpc::Method<global::Xray.App.Router.Command.OverrideBalancerTargetRequest, global::Xray.App.Router.Command.OverrideBalancerTargetResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "OverrideBalancerTarget",
        __Marshaller_xray_app_router_command_OverrideBalancerTargetRequest,
        __Marshaller_xray_app_router_command_OverrideBalancerTargetResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Xray.App.Router.Command.AddRuleRequest, global::Xray.App.Router.Command.AddRuleResponse> __Method_AddRule = new grpc::Method<global::Xray.App.Router.Command.AddRuleRequest, global::Xray.App.Router.Command.AddRuleResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddRule",
        __Marshaller_xray_app_router_command_AddRuleRequest,
        __Marshaller_xray_app_router_command_AddRuleResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Xray.App.Router.Command.RemoveRuleRequest, global::Xray.App.Router.Command.RemoveRuleResponse> __Method_RemoveRule = new grpc::Method<global::Xray.App.Router.Command.RemoveRuleRequest, global::Xray.App.Router.Command.RemoveRuleResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RemoveRule",
        __Marshaller_xray_app_router_command_RemoveRuleRequest,
        __Marshaller_xray_app_router_command_RemoveRuleResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Xray.App.Router.Command.CommandReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of RoutingService</summary>
    [grpc::BindServiceMethod(typeof(RoutingService), "BindService")]
    public abstract partial class RoutingServiceBase
    {
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task SubscribeRoutingStats(global::Xray.App.Router.Command.SubscribeRoutingStatsRequest request, grpc::IServerStreamWriter<global::Xray.App.Router.Command.RoutingContext> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Xray.App.Router.Command.RoutingContext> TestRoute(global::Xray.App.Router.Command.TestRouteRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Xray.App.Router.Command.GetBalancerInfoResponse> GetBalancerInfo(global::Xray.App.Router.Command.GetBalancerInfoRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Xray.App.Router.Command.OverrideBalancerTargetResponse> OverrideBalancerTarget(global::Xray.App.Router.Command.OverrideBalancerTargetRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Xray.App.Router.Command.AddRuleResponse> AddRule(global::Xray.App.Router.Command.AddRuleRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Xray.App.Router.Command.RemoveRuleResponse> RemoveRule(global::Xray.App.Router.Command.RemoveRuleRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for RoutingService</summary>
    public partial class RoutingServiceClient : grpc::ClientBase<RoutingServiceClient>
    {
      /// <summary>Creates a new client for RoutingService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public RoutingServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for RoutingService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public RoutingServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected RoutingServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected RoutingServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::Xray.App.Router.Command.RoutingContext> SubscribeRoutingStats(global::Xray.App.Router.Command.SubscribeRoutingStatsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubscribeRoutingStats(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::Xray.App.Router.Command.RoutingContext> SubscribeRoutingStats(global::Xray.App.Router.Command.SubscribeRoutingStatsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_SubscribeRoutingStats, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Xray.App.Router.Command.RoutingContext TestRoute(global::Xray.App.Router.Command.TestRouteRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TestRoute(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Xray.App.Router.Command.RoutingContext TestRoute(global::Xray.App.Router.Command.TestRouteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TestRoute, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Xray.App.Router.Command.RoutingContext> TestRouteAsync(global::Xray.App.Router.Command.TestRouteRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TestRouteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Xray.App.Router.Command.RoutingContext> TestRouteAsync(global::Xray.App.Router.Command.TestRouteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TestRoute, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Xray.App.Router.Command.GetBalancerInfoResponse GetBalancerInfo(global::Xray.App.Router.Command.GetBalancerInfoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBalancerInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Xray.App.Router.Command.GetBalancerInfoResponse GetBalancerInfo(global::Xray.App.Router.Command.GetBalancerInfoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetBalancerInfo, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Xray.App.Router.Command.GetBalancerInfoResponse> GetBalancerInfoAsync(global::Xray.App.Router.Command.GetBalancerInfoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBalancerInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Xray.App.Router.Command.GetBalancerInfoResponse> GetBalancerInfoAsync(global::Xray.App.Router.Command.GetBalancerInfoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetBalancerInfo, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Xray.App.Router.Command.OverrideBalancerTargetResponse OverrideBalancerTarget(global::Xray.App.Router.Command.OverrideBalancerTargetRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return OverrideBalancerTarget(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Xray.App.Router.Command.OverrideBalancerTargetResponse OverrideBalancerTarget(global::Xray.App.Router.Command.OverrideBalancerTargetRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_OverrideBalancerTarget, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Xray.App.Router.Command.OverrideBalancerTargetResponse> OverrideBalancerTargetAsync(global::Xray.App.Router.Command.OverrideBalancerTargetRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return OverrideBalancerTargetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Xray.App.Router.Command.OverrideBalancerTargetResponse> OverrideBalancerTargetAsync(global::Xray.App.Router.Command.OverrideBalancerTargetRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_OverrideBalancerTarget, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Xray.App.Router.Command.AddRuleResponse AddRule(global::Xray.App.Router.Command.AddRuleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddRule(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Xray.App.Router.Command.AddRuleResponse AddRule(global::Xray.App.Router.Command.AddRuleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddRule, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Xray.App.Router.Command.AddRuleResponse> AddRuleAsync(global::Xray.App.Router.Command.AddRuleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddRuleAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Xray.App.Router.Command.AddRuleResponse> AddRuleAsync(global::Xray.App.Router.Command.AddRuleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddRule, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Xray.App.Router.Command.RemoveRuleResponse RemoveRule(global::Xray.App.Router.Command.RemoveRuleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveRule(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Xray.App.Router.Command.RemoveRuleResponse RemoveRule(global::Xray.App.Router.Command.RemoveRuleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RemoveRule, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Xray.App.Router.Command.RemoveRuleResponse> RemoveRuleAsync(global::Xray.App.Router.Command.RemoveRuleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveRuleAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Xray.App.Router.Command.RemoveRuleResponse> RemoveRuleAsync(global::Xray.App.Router.Command.RemoveRuleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RemoveRule, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override RoutingServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new RoutingServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(RoutingServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_SubscribeRoutingStats, serviceImpl.SubscribeRoutingStats)
          .AddMethod(__Method_TestRoute, serviceImpl.TestRoute)
          .AddMethod(__Method_GetBalancerInfo, serviceImpl.GetBalancerInfo)
          .AddMethod(__Method_OverrideBalancerTarget, serviceImpl.OverrideBalancerTarget)
          .AddMethod(__Method_AddRule, serviceImpl.AddRule)
          .AddMethod(__Method_RemoveRule, serviceImpl.RemoveRule).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, RoutingServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_SubscribeRoutingStats, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Xray.App.Router.Command.SubscribeRoutingStatsRequest, global::Xray.App.Router.Command.RoutingContext>(serviceImpl.SubscribeRoutingStats));
      serviceBinder.AddMethod(__Method_TestRoute, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Xray.App.Router.Command.TestRouteRequest, global::Xray.App.Router.Command.RoutingContext>(serviceImpl.TestRoute));
      serviceBinder.AddMethod(__Method_GetBalancerInfo, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Xray.App.Router.Command.GetBalancerInfoRequest, global::Xray.App.Router.Command.GetBalancerInfoResponse>(serviceImpl.GetBalancerInfo));
      serviceBinder.AddMethod(__Method_OverrideBalancerTarget, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Xray.App.Router.Command.OverrideBalancerTargetRequest, global::Xray.App.Router.Command.OverrideBalancerTargetResponse>(serviceImpl.OverrideBalancerTarget));
      serviceBinder.AddMethod(__Method_AddRule, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Xray.App.Router.Command.AddRuleRequest, global::Xray.App.Router.Command.AddRuleResponse>(serviceImpl.AddRule));
      serviceBinder.AddMethod(__Method_RemoveRule, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Xray.App.Router.Command.RemoveRuleRequest, global::Xray.App.Router.Command.RemoveRuleResponse>(serviceImpl.RemoveRule));
    }

  }
}
#endregion
