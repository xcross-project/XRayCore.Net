// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: transport/internet/tls/config.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Xray.Transport.Internet.Tls {

  /// <summary>Holder for reflection information generated from transport/internet/tls/config.proto</summary>
  public static partial class ConfigReflection {

    #region Descriptor
    /// <summary>File descriptor for transport/internet/tls/config.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ConfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiN0cmFuc3BvcnQvaW50ZXJuZXQvdGxzL2NvbmZpZy5wcm90bxIbeHJheS50",
            "cmFuc3BvcnQuaW50ZXJuZXQudGxzIqYCCgtDZXJ0aWZpY2F0ZRITCgtjZXJ0",
            "aWZpY2F0ZRgBIAEoDBILCgNrZXkYAiABKAwSPQoFdXNhZ2UYAyABKA4yLi54",
            "cmF5LnRyYW5zcG9ydC5pbnRlcm5ldC50bHMuQ2VydGlmaWNhdGUuVXNhZ2US",
            "FQoNb2NzcF9zdGFwbGluZxgEIAEoBBIYChBjZXJ0aWZpY2F0ZV9wYXRoGAUg",
            "ASgJEhAKCGtleV9wYXRoGAYgASgJEhgKEE9uZV90aW1lX2xvYWRpbmcYByAB",
            "KAgSEwoLYnVpbGRfY2hhaW4YCCABKAgiRAoFVXNhZ2USEAoMRU5DSVBIRVJN",
            "RU5UEAASFAoQQVVUSE9SSVRZX1ZFUklGWRABEhMKD0FVVEhPUklUWV9JU1NV",
            "RRACItEDCgZDb25maWcSFgoOYWxsb3dfaW5zZWN1cmUYASABKAgSPQoLY2Vy",
            "dGlmaWNhdGUYAiADKAsyKC54cmF5LnRyYW5zcG9ydC5pbnRlcm5ldC50bHMu",
            "Q2VydGlmaWNhdGUSEwoLc2VydmVyX25hbWUYAyABKAkSFQoNbmV4dF9wcm90",
            "b2NvbBgEIAMoCRIhChllbmFibGVfc2Vzc2lvbl9yZXN1bXB0aW9uGAUgASgI",
            "EhsKE2Rpc2FibGVfc3lzdGVtX3Jvb3QYBiABKAgSEwoLbWluX3ZlcnNpb24Y",
            "ByABKAkSEwoLbWF4X3ZlcnNpb24YCCABKAkSFQoNY2lwaGVyX3N1aXRlcxgJ",
            "IAEoCRITCgtmaW5nZXJwcmludBgLIAEoCRIaChJyZWplY3RfdW5rbm93bl9z",
            "bmkYDCABKAgSLAokcGlubmVkX3BlZXJfY2VydGlmaWNhdGVfY2hhaW5fc2hh",
            "MjU2GA0gAygMEjEKKXBpbm5lZF9wZWVyX2NlcnRpZmljYXRlX3B1YmxpY19r",
            "ZXlfc2hhMjU2GA4gAygMEhYKDm1hc3Rlcl9rZXlfbG9nGA8gASgJEhkKEWN1",
            "cnZlX3ByZWZlcmVuY2VzGBAgAygJQnMKH2NvbS54cmF5LnRyYW5zcG9ydC5p",
            "bnRlcm5ldC50bHNQAVowZ2l0aHViLmNvbS94dGxzL3hyYXktY29yZS90cmFu",
            "c3BvcnQvaW50ZXJuZXQvdGxzqgIbWHJheS5UcmFuc3BvcnQuSW50ZXJuZXQu",
            "VGxzYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Xray.Transport.Internet.Tls.Certificate), global::Xray.Transport.Internet.Tls.Certificate.Parser, new[]{ "Certificate_", "Key", "Usage", "OcspStapling", "CertificatePath", "KeyPath", "OneTimeLoading", "BuildChain" }, null, new[]{ typeof(global::Xray.Transport.Internet.Tls.Certificate.Types.Usage) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xray.Transport.Internet.Tls.Config), global::Xray.Transport.Internet.Tls.Config.Parser, new[]{ "AllowInsecure", "Certificate", "ServerName", "NextProtocol", "EnableSessionResumption", "DisableSystemRoot", "MinVersion", "MaxVersion", "CipherSuites", "Fingerprint", "RejectUnknownSni", "PinnedPeerCertificateChainSha256", "PinnedPeerCertificatePublicKeySha256", "MasterKeyLog", "CurvePreferences" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class Certificate : pb::IMessage<Certificate>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Certificate> _parser = new pb::MessageParser<Certificate>(() => new Certificate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Certificate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xray.Transport.Internet.Tls.ConfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Certificate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Certificate(Certificate other) : this() {
      certificate_ = other.certificate_;
      key_ = other.key_;
      usage_ = other.usage_;
      ocspStapling_ = other.ocspStapling_;
      certificatePath_ = other.certificatePath_;
      keyPath_ = other.keyPath_;
      oneTimeLoading_ = other.oneTimeLoading_;
      buildChain_ = other.buildChain_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Certificate Clone() {
      return new Certificate(this);
    }

    /// <summary>Field number for the "certificate" field.</summary>
    public const int Certificate_FieldNumber = 1;
    private pb::ByteString certificate_ = pb::ByteString.Empty;
    /// <summary>
    /// TLS certificate in x509 format.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString Certificate_ {
      get { return certificate_; }
      set {
        certificate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 2;
    private pb::ByteString key_ = pb::ByteString.Empty;
    /// <summary>
    /// TLS key in x509 format.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "usage" field.</summary>
    public const int UsageFieldNumber = 3;
    private global::Xray.Transport.Internet.Tls.Certificate.Types.Usage usage_ = global::Xray.Transport.Internet.Tls.Certificate.Types.Usage.Encipherment;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Xray.Transport.Internet.Tls.Certificate.Types.Usage Usage {
      get { return usage_; }
      set {
        usage_ = value;
      }
    }

    /// <summary>Field number for the "ocsp_stapling" field.</summary>
    public const int OcspStaplingFieldNumber = 4;
    private ulong ocspStapling_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong OcspStapling {
      get { return ocspStapling_; }
      set {
        ocspStapling_ = value;
      }
    }

    /// <summary>Field number for the "certificate_path" field.</summary>
    public const int CertificatePathFieldNumber = 5;
    private string certificatePath_ = "";
    /// <summary>
    /// TLS certificate path
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CertificatePath {
      get { return certificatePath_; }
      set {
        certificatePath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "key_path" field.</summary>
    public const int KeyPathFieldNumber = 6;
    private string keyPath_ = "";
    /// <summary>
    /// TLS Key path
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string KeyPath {
      get { return keyPath_; }
      set {
        keyPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "One_time_loading" field.</summary>
    public const int OneTimeLoadingFieldNumber = 7;
    private bool oneTimeLoading_;
    /// <summary>
    /// If true, one-Time Loading
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool OneTimeLoading {
      get { return oneTimeLoading_; }
      set {
        oneTimeLoading_ = value;
      }
    }

    /// <summary>Field number for the "build_chain" field.</summary>
    public const int BuildChainFieldNumber = 8;
    private bool buildChain_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool BuildChain {
      get { return buildChain_; }
      set {
        buildChain_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Certificate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Certificate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Certificate_ != other.Certificate_) return false;
      if (Key != other.Key) return false;
      if (Usage != other.Usage) return false;
      if (OcspStapling != other.OcspStapling) return false;
      if (CertificatePath != other.CertificatePath) return false;
      if (KeyPath != other.KeyPath) return false;
      if (OneTimeLoading != other.OneTimeLoading) return false;
      if (BuildChain != other.BuildChain) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Certificate_.Length != 0) hash ^= Certificate_.GetHashCode();
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Usage != global::Xray.Transport.Internet.Tls.Certificate.Types.Usage.Encipherment) hash ^= Usage.GetHashCode();
      if (OcspStapling != 0UL) hash ^= OcspStapling.GetHashCode();
      if (CertificatePath.Length != 0) hash ^= CertificatePath.GetHashCode();
      if (KeyPath.Length != 0) hash ^= KeyPath.GetHashCode();
      if (OneTimeLoading != false) hash ^= OneTimeLoading.GetHashCode();
      if (BuildChain != false) hash ^= BuildChain.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Certificate_.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Certificate_);
      }
      if (Key.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Key);
      }
      if (Usage != global::Xray.Transport.Internet.Tls.Certificate.Types.Usage.Encipherment) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Usage);
      }
      if (OcspStapling != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(OcspStapling);
      }
      if (CertificatePath.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(CertificatePath);
      }
      if (KeyPath.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(KeyPath);
      }
      if (OneTimeLoading != false) {
        output.WriteRawTag(56);
        output.WriteBool(OneTimeLoading);
      }
      if (BuildChain != false) {
        output.WriteRawTag(64);
        output.WriteBool(BuildChain);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Certificate_.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Certificate_);
      }
      if (Key.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Key);
      }
      if (Usage != global::Xray.Transport.Internet.Tls.Certificate.Types.Usage.Encipherment) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Usage);
      }
      if (OcspStapling != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(OcspStapling);
      }
      if (CertificatePath.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(CertificatePath);
      }
      if (KeyPath.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(KeyPath);
      }
      if (OneTimeLoading != false) {
        output.WriteRawTag(56);
        output.WriteBool(OneTimeLoading);
      }
      if (BuildChain != false) {
        output.WriteRawTag(64);
        output.WriteBool(BuildChain);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Certificate_.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Certificate_);
      }
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Key);
      }
      if (Usage != global::Xray.Transport.Internet.Tls.Certificate.Types.Usage.Encipherment) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Usage);
      }
      if (OcspStapling != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(OcspStapling);
      }
      if (CertificatePath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CertificatePath);
      }
      if (KeyPath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(KeyPath);
      }
      if (OneTimeLoading != false) {
        size += 1 + 1;
      }
      if (BuildChain != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Certificate other) {
      if (other == null) {
        return;
      }
      if (other.Certificate_.Length != 0) {
        Certificate_ = other.Certificate_;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Usage != global::Xray.Transport.Internet.Tls.Certificate.Types.Usage.Encipherment) {
        Usage = other.Usage;
      }
      if (other.OcspStapling != 0UL) {
        OcspStapling = other.OcspStapling;
      }
      if (other.CertificatePath.Length != 0) {
        CertificatePath = other.CertificatePath;
      }
      if (other.KeyPath.Length != 0) {
        KeyPath = other.KeyPath;
      }
      if (other.OneTimeLoading != false) {
        OneTimeLoading = other.OneTimeLoading;
      }
      if (other.BuildChain != false) {
        BuildChain = other.BuildChain;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Certificate_ = input.ReadBytes();
            break;
          }
          case 18: {
            Key = input.ReadBytes();
            break;
          }
          case 24: {
            Usage = (global::Xray.Transport.Internet.Tls.Certificate.Types.Usage) input.ReadEnum();
            break;
          }
          case 32: {
            OcspStapling = input.ReadUInt64();
            break;
          }
          case 42: {
            CertificatePath = input.ReadString();
            break;
          }
          case 50: {
            KeyPath = input.ReadString();
            break;
          }
          case 56: {
            OneTimeLoading = input.ReadBool();
            break;
          }
          case 64: {
            BuildChain = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Certificate_ = input.ReadBytes();
            break;
          }
          case 18: {
            Key = input.ReadBytes();
            break;
          }
          case 24: {
            Usage = (global::Xray.Transport.Internet.Tls.Certificate.Types.Usage) input.ReadEnum();
            break;
          }
          case 32: {
            OcspStapling = input.ReadUInt64();
            break;
          }
          case 42: {
            CertificatePath = input.ReadString();
            break;
          }
          case 50: {
            KeyPath = input.ReadString();
            break;
          }
          case 56: {
            OneTimeLoading = input.ReadBool();
            break;
          }
          case 64: {
            BuildChain = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the Certificate message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public enum Usage {
        [pbr::OriginalName("ENCIPHERMENT")] Encipherment = 0,
        [pbr::OriginalName("AUTHORITY_VERIFY")] AuthorityVerify = 1,
        [pbr::OriginalName("AUTHORITY_ISSUE")] AuthorityIssue = 2,
      }

    }
    #endregion

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class Config : pb::IMessage<Config>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Config> _parser = new pb::MessageParser<Config>(() => new Config());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Config> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xray.Transport.Internet.Tls.ConfigReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Config() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Config(Config other) : this() {
      allowInsecure_ = other.allowInsecure_;
      certificate_ = other.certificate_.Clone();
      serverName_ = other.serverName_;
      nextProtocol_ = other.nextProtocol_.Clone();
      enableSessionResumption_ = other.enableSessionResumption_;
      disableSystemRoot_ = other.disableSystemRoot_;
      minVersion_ = other.minVersion_;
      maxVersion_ = other.maxVersion_;
      cipherSuites_ = other.cipherSuites_;
      fingerprint_ = other.fingerprint_;
      rejectUnknownSni_ = other.rejectUnknownSni_;
      pinnedPeerCertificateChainSha256_ = other.pinnedPeerCertificateChainSha256_.Clone();
      pinnedPeerCertificatePublicKeySha256_ = other.pinnedPeerCertificatePublicKeySha256_.Clone();
      masterKeyLog_ = other.masterKeyLog_;
      curvePreferences_ = other.curvePreferences_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Config Clone() {
      return new Config(this);
    }

    /// <summary>Field number for the "allow_insecure" field.</summary>
    public const int AllowInsecureFieldNumber = 1;
    private bool allowInsecure_;
    /// <summary>
    /// Whether or not to allow self-signed certificates.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool AllowInsecure {
      get { return allowInsecure_; }
      set {
        allowInsecure_ = value;
      }
    }

    /// <summary>Field number for the "certificate" field.</summary>
    public const int CertificateFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Xray.Transport.Internet.Tls.Certificate> _repeated_certificate_codec
        = pb::FieldCodec.ForMessage(18, global::Xray.Transport.Internet.Tls.Certificate.Parser);
    private readonly pbc::RepeatedField<global::Xray.Transport.Internet.Tls.Certificate> certificate_ = new pbc::RepeatedField<global::Xray.Transport.Internet.Tls.Certificate>();
    /// <summary>
    /// List of certificates to be served on server.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Xray.Transport.Internet.Tls.Certificate> Certificate {
      get { return certificate_; }
    }

    /// <summary>Field number for the "server_name" field.</summary>
    public const int ServerNameFieldNumber = 3;
    private string serverName_ = "";
    /// <summary>
    /// Override server name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ServerName {
      get { return serverName_; }
      set {
        serverName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "next_protocol" field.</summary>
    public const int NextProtocolFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_nextProtocol_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> nextProtocol_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Lists of string as ALPN values.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<string> NextProtocol {
      get { return nextProtocol_; }
    }

    /// <summary>Field number for the "enable_session_resumption" field.</summary>
    public const int EnableSessionResumptionFieldNumber = 5;
    private bool enableSessionResumption_;
    /// <summary>
    /// Whether or not to enable session (ticket) resumption.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool EnableSessionResumption {
      get { return enableSessionResumption_; }
      set {
        enableSessionResumption_ = value;
      }
    }

    /// <summary>Field number for the "disable_system_root" field.</summary>
    public const int DisableSystemRootFieldNumber = 6;
    private bool disableSystemRoot_;
    /// <summary>
    /// If true, root certificates on the system will not be loaded for
    /// verification.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool DisableSystemRoot {
      get { return disableSystemRoot_; }
      set {
        disableSystemRoot_ = value;
      }
    }

    /// <summary>Field number for the "min_version" field.</summary>
    public const int MinVersionFieldNumber = 7;
    private string minVersion_ = "";
    /// <summary>
    /// The minimum TLS version.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string MinVersion {
      get { return minVersion_; }
      set {
        minVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "max_version" field.</summary>
    public const int MaxVersionFieldNumber = 8;
    private string maxVersion_ = "";
    /// <summary>
    /// The maximum TLS version.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string MaxVersion {
      get { return maxVersion_; }
      set {
        maxVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cipher_suites" field.</summary>
    public const int CipherSuitesFieldNumber = 9;
    private string cipherSuites_ = "";
    /// <summary>
    /// Specify cipher suites, except for TLS 1.3.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CipherSuites {
      get { return cipherSuites_; }
      set {
        cipherSuites_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fingerprint" field.</summary>
    public const int FingerprintFieldNumber = 11;
    private string fingerprint_ = "";
    /// <summary>
    /// TLS Client Hello fingerprint (uTLS).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Fingerprint {
      get { return fingerprint_; }
      set {
        fingerprint_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "reject_unknown_sni" field.</summary>
    public const int RejectUnknownSniFieldNumber = 12;
    private bool rejectUnknownSni_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool RejectUnknownSni {
      get { return rejectUnknownSni_; }
      set {
        rejectUnknownSni_ = value;
      }
    }

    /// <summary>Field number for the "pinned_peer_certificate_chain_sha256" field.</summary>
    public const int PinnedPeerCertificateChainSha256FieldNumber = 13;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_pinnedPeerCertificateChainSha256_codec
        = pb::FieldCodec.ForBytes(106);
    private readonly pbc::RepeatedField<pb::ByteString> pinnedPeerCertificateChainSha256_ = new pbc::RepeatedField<pb::ByteString>();
    /// <summary>
    /// @Document A pinned certificate chain sha256 hash.
    ///@Document If the server's hash does not match this value, the connection will be aborted.
    ///@Document This value replace allow_insecure.
    ///@Critical
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<pb::ByteString> PinnedPeerCertificateChainSha256 {
      get { return pinnedPeerCertificateChainSha256_; }
    }

    /// <summary>Field number for the "pinned_peer_certificate_public_key_sha256" field.</summary>
    public const int PinnedPeerCertificatePublicKeySha256FieldNumber = 14;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_pinnedPeerCertificatePublicKeySha256_codec
        = pb::FieldCodec.ForBytes(114);
    private readonly pbc::RepeatedField<pb::ByteString> pinnedPeerCertificatePublicKeySha256_ = new pbc::RepeatedField<pb::ByteString>();
    /// <summary>
    /// @Document A pinned certificate public key sha256 hash.
    ///@Document If the server's public key hash does not match this value, the connection will be aborted.
    ///@Document This value replace allow_insecure.
    ///@Critical
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<pb::ByteString> PinnedPeerCertificatePublicKeySha256 {
      get { return pinnedPeerCertificatePublicKeySha256_; }
    }

    /// <summary>Field number for the "master_key_log" field.</summary>
    public const int MasterKeyLogFieldNumber = 15;
    private string masterKeyLog_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string MasterKeyLog {
      get { return masterKeyLog_; }
      set {
        masterKeyLog_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "curve_preferences" field.</summary>
    public const int CurvePreferencesFieldNumber = 16;
    private static readonly pb::FieldCodec<string> _repeated_curvePreferences_codec
        = pb::FieldCodec.ForString(130);
    private readonly pbc::RepeatedField<string> curvePreferences_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Lists of string as CurvePreferences values.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<string> CurvePreferences {
      get { return curvePreferences_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Config);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Config other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AllowInsecure != other.AllowInsecure) return false;
      if(!certificate_.Equals(other.certificate_)) return false;
      if (ServerName != other.ServerName) return false;
      if(!nextProtocol_.Equals(other.nextProtocol_)) return false;
      if (EnableSessionResumption != other.EnableSessionResumption) return false;
      if (DisableSystemRoot != other.DisableSystemRoot) return false;
      if (MinVersion != other.MinVersion) return false;
      if (MaxVersion != other.MaxVersion) return false;
      if (CipherSuites != other.CipherSuites) return false;
      if (Fingerprint != other.Fingerprint) return false;
      if (RejectUnknownSni != other.RejectUnknownSni) return false;
      if(!pinnedPeerCertificateChainSha256_.Equals(other.pinnedPeerCertificateChainSha256_)) return false;
      if(!pinnedPeerCertificatePublicKeySha256_.Equals(other.pinnedPeerCertificatePublicKeySha256_)) return false;
      if (MasterKeyLog != other.MasterKeyLog) return false;
      if(!curvePreferences_.Equals(other.curvePreferences_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (AllowInsecure != false) hash ^= AllowInsecure.GetHashCode();
      hash ^= certificate_.GetHashCode();
      if (ServerName.Length != 0) hash ^= ServerName.GetHashCode();
      hash ^= nextProtocol_.GetHashCode();
      if (EnableSessionResumption != false) hash ^= EnableSessionResumption.GetHashCode();
      if (DisableSystemRoot != false) hash ^= DisableSystemRoot.GetHashCode();
      if (MinVersion.Length != 0) hash ^= MinVersion.GetHashCode();
      if (MaxVersion.Length != 0) hash ^= MaxVersion.GetHashCode();
      if (CipherSuites.Length != 0) hash ^= CipherSuites.GetHashCode();
      if (Fingerprint.Length != 0) hash ^= Fingerprint.GetHashCode();
      if (RejectUnknownSni != false) hash ^= RejectUnknownSni.GetHashCode();
      hash ^= pinnedPeerCertificateChainSha256_.GetHashCode();
      hash ^= pinnedPeerCertificatePublicKeySha256_.GetHashCode();
      if (MasterKeyLog.Length != 0) hash ^= MasterKeyLog.GetHashCode();
      hash ^= curvePreferences_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (AllowInsecure != false) {
        output.WriteRawTag(8);
        output.WriteBool(AllowInsecure);
      }
      certificate_.WriteTo(output, _repeated_certificate_codec);
      if (ServerName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ServerName);
      }
      nextProtocol_.WriteTo(output, _repeated_nextProtocol_codec);
      if (EnableSessionResumption != false) {
        output.WriteRawTag(40);
        output.WriteBool(EnableSessionResumption);
      }
      if (DisableSystemRoot != false) {
        output.WriteRawTag(48);
        output.WriteBool(DisableSystemRoot);
      }
      if (MinVersion.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(MinVersion);
      }
      if (MaxVersion.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(MaxVersion);
      }
      if (CipherSuites.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(CipherSuites);
      }
      if (Fingerprint.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Fingerprint);
      }
      if (RejectUnknownSni != false) {
        output.WriteRawTag(96);
        output.WriteBool(RejectUnknownSni);
      }
      pinnedPeerCertificateChainSha256_.WriteTo(output, _repeated_pinnedPeerCertificateChainSha256_codec);
      pinnedPeerCertificatePublicKeySha256_.WriteTo(output, _repeated_pinnedPeerCertificatePublicKeySha256_codec);
      if (MasterKeyLog.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(MasterKeyLog);
      }
      curvePreferences_.WriteTo(output, _repeated_curvePreferences_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (AllowInsecure != false) {
        output.WriteRawTag(8);
        output.WriteBool(AllowInsecure);
      }
      certificate_.WriteTo(ref output, _repeated_certificate_codec);
      if (ServerName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ServerName);
      }
      nextProtocol_.WriteTo(ref output, _repeated_nextProtocol_codec);
      if (EnableSessionResumption != false) {
        output.WriteRawTag(40);
        output.WriteBool(EnableSessionResumption);
      }
      if (DisableSystemRoot != false) {
        output.WriteRawTag(48);
        output.WriteBool(DisableSystemRoot);
      }
      if (MinVersion.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(MinVersion);
      }
      if (MaxVersion.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(MaxVersion);
      }
      if (CipherSuites.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(CipherSuites);
      }
      if (Fingerprint.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Fingerprint);
      }
      if (RejectUnknownSni != false) {
        output.WriteRawTag(96);
        output.WriteBool(RejectUnknownSni);
      }
      pinnedPeerCertificateChainSha256_.WriteTo(ref output, _repeated_pinnedPeerCertificateChainSha256_codec);
      pinnedPeerCertificatePublicKeySha256_.WriteTo(ref output, _repeated_pinnedPeerCertificatePublicKeySha256_codec);
      if (MasterKeyLog.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(MasterKeyLog);
      }
      curvePreferences_.WriteTo(ref output, _repeated_curvePreferences_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (AllowInsecure != false) {
        size += 1 + 1;
      }
      size += certificate_.CalculateSize(_repeated_certificate_codec);
      if (ServerName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServerName);
      }
      size += nextProtocol_.CalculateSize(_repeated_nextProtocol_codec);
      if (EnableSessionResumption != false) {
        size += 1 + 1;
      }
      if (DisableSystemRoot != false) {
        size += 1 + 1;
      }
      if (MinVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MinVersion);
      }
      if (MaxVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MaxVersion);
      }
      if (CipherSuites.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CipherSuites);
      }
      if (Fingerprint.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Fingerprint);
      }
      if (RejectUnknownSni != false) {
        size += 1 + 1;
      }
      size += pinnedPeerCertificateChainSha256_.CalculateSize(_repeated_pinnedPeerCertificateChainSha256_codec);
      size += pinnedPeerCertificatePublicKeySha256_.CalculateSize(_repeated_pinnedPeerCertificatePublicKeySha256_codec);
      if (MasterKeyLog.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MasterKeyLog);
      }
      size += curvePreferences_.CalculateSize(_repeated_curvePreferences_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Config other) {
      if (other == null) {
        return;
      }
      if (other.AllowInsecure != false) {
        AllowInsecure = other.AllowInsecure;
      }
      certificate_.Add(other.certificate_);
      if (other.ServerName.Length != 0) {
        ServerName = other.ServerName;
      }
      nextProtocol_.Add(other.nextProtocol_);
      if (other.EnableSessionResumption != false) {
        EnableSessionResumption = other.EnableSessionResumption;
      }
      if (other.DisableSystemRoot != false) {
        DisableSystemRoot = other.DisableSystemRoot;
      }
      if (other.MinVersion.Length != 0) {
        MinVersion = other.MinVersion;
      }
      if (other.MaxVersion.Length != 0) {
        MaxVersion = other.MaxVersion;
      }
      if (other.CipherSuites.Length != 0) {
        CipherSuites = other.CipherSuites;
      }
      if (other.Fingerprint.Length != 0) {
        Fingerprint = other.Fingerprint;
      }
      if (other.RejectUnknownSni != false) {
        RejectUnknownSni = other.RejectUnknownSni;
      }
      pinnedPeerCertificateChainSha256_.Add(other.pinnedPeerCertificateChainSha256_);
      pinnedPeerCertificatePublicKeySha256_.Add(other.pinnedPeerCertificatePublicKeySha256_);
      if (other.MasterKeyLog.Length != 0) {
        MasterKeyLog = other.MasterKeyLog;
      }
      curvePreferences_.Add(other.curvePreferences_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AllowInsecure = input.ReadBool();
            break;
          }
          case 18: {
            certificate_.AddEntriesFrom(input, _repeated_certificate_codec);
            break;
          }
          case 26: {
            ServerName = input.ReadString();
            break;
          }
          case 34: {
            nextProtocol_.AddEntriesFrom(input, _repeated_nextProtocol_codec);
            break;
          }
          case 40: {
            EnableSessionResumption = input.ReadBool();
            break;
          }
          case 48: {
            DisableSystemRoot = input.ReadBool();
            break;
          }
          case 58: {
            MinVersion = input.ReadString();
            break;
          }
          case 66: {
            MaxVersion = input.ReadString();
            break;
          }
          case 74: {
            CipherSuites = input.ReadString();
            break;
          }
          case 90: {
            Fingerprint = input.ReadString();
            break;
          }
          case 96: {
            RejectUnknownSni = input.ReadBool();
            break;
          }
          case 106: {
            pinnedPeerCertificateChainSha256_.AddEntriesFrom(input, _repeated_pinnedPeerCertificateChainSha256_codec);
            break;
          }
          case 114: {
            pinnedPeerCertificatePublicKeySha256_.AddEntriesFrom(input, _repeated_pinnedPeerCertificatePublicKeySha256_codec);
            break;
          }
          case 122: {
            MasterKeyLog = input.ReadString();
            break;
          }
          case 130: {
            curvePreferences_.AddEntriesFrom(input, _repeated_curvePreferences_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            AllowInsecure = input.ReadBool();
            break;
          }
          case 18: {
            certificate_.AddEntriesFrom(ref input, _repeated_certificate_codec);
            break;
          }
          case 26: {
            ServerName = input.ReadString();
            break;
          }
          case 34: {
            nextProtocol_.AddEntriesFrom(ref input, _repeated_nextProtocol_codec);
            break;
          }
          case 40: {
            EnableSessionResumption = input.ReadBool();
            break;
          }
          case 48: {
            DisableSystemRoot = input.ReadBool();
            break;
          }
          case 58: {
            MinVersion = input.ReadString();
            break;
          }
          case 66: {
            MaxVersion = input.ReadString();
            break;
          }
          case 74: {
            CipherSuites = input.ReadString();
            break;
          }
          case 90: {
            Fingerprint = input.ReadString();
            break;
          }
          case 96: {
            RejectUnknownSni = input.ReadBool();
            break;
          }
          case 106: {
            pinnedPeerCertificateChainSha256_.AddEntriesFrom(ref input, _repeated_pinnedPeerCertificateChainSha256_codec);
            break;
          }
          case 114: {
            pinnedPeerCertificatePublicKeySha256_.AddEntriesFrom(ref input, _repeated_pinnedPeerCertificatePublicKeySha256_codec);
            break;
          }
          case 122: {
            MasterKeyLog = input.ReadString();
            break;
          }
          case 130: {
            curvePreferences_.AddEntriesFrom(ref input, _repeated_curvePreferences_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
