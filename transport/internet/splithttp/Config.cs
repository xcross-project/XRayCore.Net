// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: transport/internet/splithttp/config.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Xray.Transport.Internet.SplitHttp {

  /// <summary>Holder for reflection information generated from transport/internet/splithttp/config.proto</summary>
  public static partial class ConfigReflection {

    #region Descriptor
    /// <summary>File descriptor for transport/internet/splithttp/config.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ConfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cil0cmFuc3BvcnQvaW50ZXJuZXQvc3BsaXRodHRwL2NvbmZpZy5wcm90bxIh",
            "eHJheS50cmFuc3BvcnQuaW50ZXJuZXQuc3BsaXRodHRwGh90cmFuc3BvcnQv",
            "aW50ZXJuZXQvY29uZmlnLnByb3RvIvwECgZDb25maWcSDAoEaG9zdBgBIAEo",
            "CRIMCgRwYXRoGAIgASgJEkUKBmhlYWRlchgDIAMoCzI1LnhyYXkudHJhbnNw",
            "b3J0LmludGVybmV0LnNwbGl0aHR0cC5Db25maWcuSGVhZGVyRW50cnkSUAoU",
            "c2NNYXhDb25jdXJyZW50UG9zdHMYBCABKAsyMi54cmF5LnRyYW5zcG9ydC5p",
            "bnRlcm5ldC5zcGxpdGh0dHAuUmFuZFJhbmdlQ29uZmlnEk4KEnNjTWF4RWFj",
            "aFBvc3RCeXRlcxgFIAEoCzIyLnhyYXkudHJhbnNwb3J0LmludGVybmV0LnNw",
            "bGl0aHR0cC5SYW5kUmFuZ2VDb25maWcSUAoUc2NNaW5Qb3N0c0ludGVydmFs",
            "TXMYBiABKAsyMi54cmF5LnRyYW5zcG9ydC5pbnRlcm5ldC5zcGxpdGh0dHAu",
            "UmFuZFJhbmdlQ29uZmlnEhMKC25vU1NFSGVhZGVyGAcgASgIEkkKDXhQYWRk",
            "aW5nQnl0ZXMYCCABKAsyMi54cmF5LnRyYW5zcG9ydC5pbnRlcm5ldC5zcGxp",
            "dGh0dHAuUmFuZFJhbmdlQ29uZmlnEj0KBHhtdXgYCSABKAsyLy54cmF5LnRy",
            "YW5zcG9ydC5pbnRlcm5ldC5zcGxpdGh0dHAuTXVsdGlwbGV4aW5nEj8KEGRv",
            "d25sb2FkU2V0dGluZ3MYCiABKAsyJS54cmF5LnRyYW5zcG9ydC5pbnRlcm5l",
            "dC5TdHJlYW1Db25maWcSDAoEbW9kZRgLIAEoCRotCgtIZWFkZXJFbnRyeRIL",
            "CgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBIisKD1JhbmRSYW5nZUNv",
            "bmZpZxIMCgRmcm9tGAEgASgFEgoKAnRvGAIgASgFIr4CCgxNdWx0aXBsZXhp",
            "bmcSSgoObWF4Q29uY3VycmVuY3kYASABKAsyMi54cmF5LnRyYW5zcG9ydC5p",
            "bnRlcm5ldC5zcGxpdGh0dHAuUmFuZFJhbmdlQ29uZmlnEkoKDm1heENvbm5l",
            "Y3Rpb25zGAIgASgLMjIueHJheS50cmFuc3BvcnQuaW50ZXJuZXQuc3BsaXRo",
            "dHRwLlJhbmRSYW5nZUNvbmZpZxJKCg5jTWF4UmV1c2VUaW1lcxgDIAEoCzIy",
            "LnhyYXkudHJhbnNwb3J0LmludGVybmV0LnNwbGl0aHR0cC5SYW5kUmFuZ2VD",
            "b25maWcSSgoOY01heExpZmV0aW1lTXMYBCABKAsyMi54cmF5LnRyYW5zcG9y",
            "dC5pbnRlcm5ldC5zcGxpdGh0dHAuUmFuZFJhbmdlQ29uZmlnQoUBCiVjb20u",
            "eHJheS50cmFuc3BvcnQuaW50ZXJuZXQuc3BsaXRodHRwUAFaNmdpdGh1Yi5j",
            "b20veHRscy94cmF5LWNvcmUvdHJhbnNwb3J0L2ludGVybmV0L3NwbGl0aHR0",
            "cKoCIVhyYXkuVHJhbnNwb3J0LkludGVybmV0LlNwbGl0SHR0cGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Xray.Transport.Internet.ConfigReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Xray.Transport.Internet.SplitHttp.Config), global::Xray.Transport.Internet.SplitHttp.Config.Parser, new[]{ "Host", "Path", "Header", "ScMaxConcurrentPosts", "ScMaxEachPostBytes", "ScMinPostsIntervalMs", "NoSSEHeader", "XPaddingBytes", "Xmux", "DownloadSettings", "Mode" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xray.Transport.Internet.SplitHttp.RandRangeConfig), global::Xray.Transport.Internet.SplitHttp.RandRangeConfig.Parser, new[]{ "From", "To" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xray.Transport.Internet.SplitHttp.Multiplexing), global::Xray.Transport.Internet.SplitHttp.Multiplexing.Parser, new[]{ "MaxConcurrency", "MaxConnections", "CMaxReuseTimes", "CMaxLifetimeMs" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class Config : pb::IMessage<Config>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Config> _parser = new pb::MessageParser<Config>(() => new Config());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Config> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xray.Transport.Internet.SplitHttp.ConfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Config() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Config(Config other) : this() {
      host_ = other.host_;
      path_ = other.path_;
      header_ = other.header_.Clone();
      scMaxConcurrentPosts_ = other.scMaxConcurrentPosts_ != null ? other.scMaxConcurrentPosts_.Clone() : null;
      scMaxEachPostBytes_ = other.scMaxEachPostBytes_ != null ? other.scMaxEachPostBytes_.Clone() : null;
      scMinPostsIntervalMs_ = other.scMinPostsIntervalMs_ != null ? other.scMinPostsIntervalMs_.Clone() : null;
      noSSEHeader_ = other.noSSEHeader_;
      xPaddingBytes_ = other.xPaddingBytes_ != null ? other.xPaddingBytes_.Clone() : null;
      xmux_ = other.xmux_ != null ? other.xmux_.Clone() : null;
      downloadSettings_ = other.downloadSettings_ != null ? other.downloadSettings_.Clone() : null;
      mode_ = other.mode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Config Clone() {
      return new Config(this);
    }

    /// <summary>Field number for the "host" field.</summary>
    public const int HostFieldNumber = 1;
    private string host_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Host {
      get { return host_; }
      set {
        host_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "path" field.</summary>
    public const int PathFieldNumber = 2;
    private string path_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Path {
      get { return path_; }
      set {
        path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 3;
    private static readonly pbc::MapField<string, string>.Codec _map_header_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 26);
    private readonly pbc::MapField<string, string> header_ = new pbc::MapField<string, string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::MapField<string, string> Header {
      get { return header_; }
    }

    /// <summary>Field number for the "scMaxConcurrentPosts" field.</summary>
    public const int ScMaxConcurrentPostsFieldNumber = 4;
    private global::Xray.Transport.Internet.SplitHttp.RandRangeConfig scMaxConcurrentPosts_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Xray.Transport.Internet.SplitHttp.RandRangeConfig ScMaxConcurrentPosts {
      get { return scMaxConcurrentPosts_; }
      set {
        scMaxConcurrentPosts_ = value;
      }
    }

    /// <summary>Field number for the "scMaxEachPostBytes" field.</summary>
    public const int ScMaxEachPostBytesFieldNumber = 5;
    private global::Xray.Transport.Internet.SplitHttp.RandRangeConfig scMaxEachPostBytes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Xray.Transport.Internet.SplitHttp.RandRangeConfig ScMaxEachPostBytes {
      get { return scMaxEachPostBytes_; }
      set {
        scMaxEachPostBytes_ = value;
      }
    }

    /// <summary>Field number for the "scMinPostsIntervalMs" field.</summary>
    public const int ScMinPostsIntervalMsFieldNumber = 6;
    private global::Xray.Transport.Internet.SplitHttp.RandRangeConfig scMinPostsIntervalMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Xray.Transport.Internet.SplitHttp.RandRangeConfig ScMinPostsIntervalMs {
      get { return scMinPostsIntervalMs_; }
      set {
        scMinPostsIntervalMs_ = value;
      }
    }

    /// <summary>Field number for the "noSSEHeader" field.</summary>
    public const int NoSSEHeaderFieldNumber = 7;
    private bool noSSEHeader_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool NoSSEHeader {
      get { return noSSEHeader_; }
      set {
        noSSEHeader_ = value;
      }
    }

    /// <summary>Field number for the "xPaddingBytes" field.</summary>
    public const int XPaddingBytesFieldNumber = 8;
    private global::Xray.Transport.Internet.SplitHttp.RandRangeConfig xPaddingBytes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Xray.Transport.Internet.SplitHttp.RandRangeConfig XPaddingBytes {
      get { return xPaddingBytes_; }
      set {
        xPaddingBytes_ = value;
      }
    }

    /// <summary>Field number for the "xmux" field.</summary>
    public const int XmuxFieldNumber = 9;
    private global::Xray.Transport.Internet.SplitHttp.Multiplexing xmux_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Xray.Transport.Internet.SplitHttp.Multiplexing Xmux {
      get { return xmux_; }
      set {
        xmux_ = value;
      }
    }

    /// <summary>Field number for the "downloadSettings" field.</summary>
    public const int DownloadSettingsFieldNumber = 10;
    private global::Xray.Transport.Internet.StreamConfig downloadSettings_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Xray.Transport.Internet.StreamConfig DownloadSettings {
      get { return downloadSettings_; }
      set {
        downloadSettings_ = value;
      }
    }

    /// <summary>Field number for the "mode" field.</summary>
    public const int ModeFieldNumber = 11;
    private string mode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Mode {
      get { return mode_; }
      set {
        mode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Config);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Config other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Host != other.Host) return false;
      if (Path != other.Path) return false;
      if (!Header.Equals(other.Header)) return false;
      if (!object.Equals(ScMaxConcurrentPosts, other.ScMaxConcurrentPosts)) return false;
      if (!object.Equals(ScMaxEachPostBytes, other.ScMaxEachPostBytes)) return false;
      if (!object.Equals(ScMinPostsIntervalMs, other.ScMinPostsIntervalMs)) return false;
      if (NoSSEHeader != other.NoSSEHeader) return false;
      if (!object.Equals(XPaddingBytes, other.XPaddingBytes)) return false;
      if (!object.Equals(Xmux, other.Xmux)) return false;
      if (!object.Equals(DownloadSettings, other.DownloadSettings)) return false;
      if (Mode != other.Mode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Host.Length != 0) hash ^= Host.GetHashCode();
      if (Path.Length != 0) hash ^= Path.GetHashCode();
      hash ^= Header.GetHashCode();
      if (scMaxConcurrentPosts_ != null) hash ^= ScMaxConcurrentPosts.GetHashCode();
      if (scMaxEachPostBytes_ != null) hash ^= ScMaxEachPostBytes.GetHashCode();
      if (scMinPostsIntervalMs_ != null) hash ^= ScMinPostsIntervalMs.GetHashCode();
      if (NoSSEHeader != false) hash ^= NoSSEHeader.GetHashCode();
      if (xPaddingBytes_ != null) hash ^= XPaddingBytes.GetHashCode();
      if (xmux_ != null) hash ^= Xmux.GetHashCode();
      if (downloadSettings_ != null) hash ^= DownloadSettings.GetHashCode();
      if (Mode.Length != 0) hash ^= Mode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Host.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Host);
      }
      if (Path.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Path);
      }
      header_.WriteTo(output, _map_header_codec);
      if (scMaxConcurrentPosts_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ScMaxConcurrentPosts);
      }
      if (scMaxEachPostBytes_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(ScMaxEachPostBytes);
      }
      if (scMinPostsIntervalMs_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(ScMinPostsIntervalMs);
      }
      if (NoSSEHeader != false) {
        output.WriteRawTag(56);
        output.WriteBool(NoSSEHeader);
      }
      if (xPaddingBytes_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(XPaddingBytes);
      }
      if (xmux_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Xmux);
      }
      if (downloadSettings_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(DownloadSettings);
      }
      if (Mode.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Mode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Host.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Host);
      }
      if (Path.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Path);
      }
      header_.WriteTo(ref output, _map_header_codec);
      if (scMaxConcurrentPosts_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ScMaxConcurrentPosts);
      }
      if (scMaxEachPostBytes_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(ScMaxEachPostBytes);
      }
      if (scMinPostsIntervalMs_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(ScMinPostsIntervalMs);
      }
      if (NoSSEHeader != false) {
        output.WriteRawTag(56);
        output.WriteBool(NoSSEHeader);
      }
      if (xPaddingBytes_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(XPaddingBytes);
      }
      if (xmux_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Xmux);
      }
      if (downloadSettings_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(DownloadSettings);
      }
      if (Mode.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Mode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Host.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Host);
      }
      if (Path.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
      }
      size += header_.CalculateSize(_map_header_codec);
      if (scMaxConcurrentPosts_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ScMaxConcurrentPosts);
      }
      if (scMaxEachPostBytes_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ScMaxEachPostBytes);
      }
      if (scMinPostsIntervalMs_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ScMinPostsIntervalMs);
      }
      if (NoSSEHeader != false) {
        size += 1 + 1;
      }
      if (xPaddingBytes_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(XPaddingBytes);
      }
      if (xmux_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Xmux);
      }
      if (downloadSettings_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DownloadSettings);
      }
      if (Mode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Mode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Config other) {
      if (other == null) {
        return;
      }
      if (other.Host.Length != 0) {
        Host = other.Host;
      }
      if (other.Path.Length != 0) {
        Path = other.Path;
      }
      header_.MergeFrom(other.header_);
      if (other.scMaxConcurrentPosts_ != null) {
        if (scMaxConcurrentPosts_ == null) {
          ScMaxConcurrentPosts = new global::Xray.Transport.Internet.SplitHttp.RandRangeConfig();
        }
        ScMaxConcurrentPosts.MergeFrom(other.ScMaxConcurrentPosts);
      }
      if (other.scMaxEachPostBytes_ != null) {
        if (scMaxEachPostBytes_ == null) {
          ScMaxEachPostBytes = new global::Xray.Transport.Internet.SplitHttp.RandRangeConfig();
        }
        ScMaxEachPostBytes.MergeFrom(other.ScMaxEachPostBytes);
      }
      if (other.scMinPostsIntervalMs_ != null) {
        if (scMinPostsIntervalMs_ == null) {
          ScMinPostsIntervalMs = new global::Xray.Transport.Internet.SplitHttp.RandRangeConfig();
        }
        ScMinPostsIntervalMs.MergeFrom(other.ScMinPostsIntervalMs);
      }
      if (other.NoSSEHeader != false) {
        NoSSEHeader = other.NoSSEHeader;
      }
      if (other.xPaddingBytes_ != null) {
        if (xPaddingBytes_ == null) {
          XPaddingBytes = new global::Xray.Transport.Internet.SplitHttp.RandRangeConfig();
        }
        XPaddingBytes.MergeFrom(other.XPaddingBytes);
      }
      if (other.xmux_ != null) {
        if (xmux_ == null) {
          Xmux = new global::Xray.Transport.Internet.SplitHttp.Multiplexing();
        }
        Xmux.MergeFrom(other.Xmux);
      }
      if (other.downloadSettings_ != null) {
        if (downloadSettings_ == null) {
          DownloadSettings = new global::Xray.Transport.Internet.StreamConfig();
        }
        DownloadSettings.MergeFrom(other.DownloadSettings);
      }
      if (other.Mode.Length != 0) {
        Mode = other.Mode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Host = input.ReadString();
            break;
          }
          case 18: {
            Path = input.ReadString();
            break;
          }
          case 26: {
            header_.AddEntriesFrom(input, _map_header_codec);
            break;
          }
          case 34: {
            if (scMaxConcurrentPosts_ == null) {
              ScMaxConcurrentPosts = new global::Xray.Transport.Internet.SplitHttp.RandRangeConfig();
            }
            input.ReadMessage(ScMaxConcurrentPosts);
            break;
          }
          case 42: {
            if (scMaxEachPostBytes_ == null) {
              ScMaxEachPostBytes = new global::Xray.Transport.Internet.SplitHttp.RandRangeConfig();
            }
            input.ReadMessage(ScMaxEachPostBytes);
            break;
          }
          case 50: {
            if (scMinPostsIntervalMs_ == null) {
              ScMinPostsIntervalMs = new global::Xray.Transport.Internet.SplitHttp.RandRangeConfig();
            }
            input.ReadMessage(ScMinPostsIntervalMs);
            break;
          }
          case 56: {
            NoSSEHeader = input.ReadBool();
            break;
          }
          case 66: {
            if (xPaddingBytes_ == null) {
              XPaddingBytes = new global::Xray.Transport.Internet.SplitHttp.RandRangeConfig();
            }
            input.ReadMessage(XPaddingBytes);
            break;
          }
          case 74: {
            if (xmux_ == null) {
              Xmux = new global::Xray.Transport.Internet.SplitHttp.Multiplexing();
            }
            input.ReadMessage(Xmux);
            break;
          }
          case 82: {
            if (downloadSettings_ == null) {
              DownloadSettings = new global::Xray.Transport.Internet.StreamConfig();
            }
            input.ReadMessage(DownloadSettings);
            break;
          }
          case 90: {
            Mode = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Host = input.ReadString();
            break;
          }
          case 18: {
            Path = input.ReadString();
            break;
          }
          case 26: {
            header_.AddEntriesFrom(ref input, _map_header_codec);
            break;
          }
          case 34: {
            if (scMaxConcurrentPosts_ == null) {
              ScMaxConcurrentPosts = new global::Xray.Transport.Internet.SplitHttp.RandRangeConfig();
            }
            input.ReadMessage(ScMaxConcurrentPosts);
            break;
          }
          case 42: {
            if (scMaxEachPostBytes_ == null) {
              ScMaxEachPostBytes = new global::Xray.Transport.Internet.SplitHttp.RandRangeConfig();
            }
            input.ReadMessage(ScMaxEachPostBytes);
            break;
          }
          case 50: {
            if (scMinPostsIntervalMs_ == null) {
              ScMinPostsIntervalMs = new global::Xray.Transport.Internet.SplitHttp.RandRangeConfig();
            }
            input.ReadMessage(ScMinPostsIntervalMs);
            break;
          }
          case 56: {
            NoSSEHeader = input.ReadBool();
            break;
          }
          case 66: {
            if (xPaddingBytes_ == null) {
              XPaddingBytes = new global::Xray.Transport.Internet.SplitHttp.RandRangeConfig();
            }
            input.ReadMessage(XPaddingBytes);
            break;
          }
          case 74: {
            if (xmux_ == null) {
              Xmux = new global::Xray.Transport.Internet.SplitHttp.Multiplexing();
            }
            input.ReadMessage(Xmux);
            break;
          }
          case 82: {
            if (downloadSettings_ == null) {
              DownloadSettings = new global::Xray.Transport.Internet.StreamConfig();
            }
            input.ReadMessage(DownloadSettings);
            break;
          }
          case 90: {
            Mode = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class RandRangeConfig : pb::IMessage<RandRangeConfig>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RandRangeConfig> _parser = new pb::MessageParser<RandRangeConfig>(() => new RandRangeConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<RandRangeConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xray.Transport.Internet.SplitHttp.ConfigReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RandRangeConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RandRangeConfig(RandRangeConfig other) : this() {
      from_ = other.from_;
      to_ = other.to_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RandRangeConfig Clone() {
      return new RandRangeConfig(this);
    }

    /// <summary>Field number for the "from" field.</summary>
    public const int FromFieldNumber = 1;
    private int from_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int From {
      get { return from_; }
      set {
        from_ = value;
      }
    }

    /// <summary>Field number for the "to" field.</summary>
    public const int ToFieldNumber = 2;
    private int to_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int To {
      get { return to_; }
      set {
        to_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as RandRangeConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(RandRangeConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (From != other.From) return false;
      if (To != other.To) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (From != 0) hash ^= From.GetHashCode();
      if (To != 0) hash ^= To.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (From != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(From);
      }
      if (To != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(To);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (From != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(From);
      }
      if (To != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(To);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (From != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(From);
      }
      if (To != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(To);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(RandRangeConfig other) {
      if (other == null) {
        return;
      }
      if (other.From != 0) {
        From = other.From;
      }
      if (other.To != 0) {
        To = other.To;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            From = input.ReadInt32();
            break;
          }
          case 16: {
            To = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            From = input.ReadInt32();
            break;
          }
          case 16: {
            To = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class Multiplexing : pb::IMessage<Multiplexing>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Multiplexing> _parser = new pb::MessageParser<Multiplexing>(() => new Multiplexing());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Multiplexing> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xray.Transport.Internet.SplitHttp.ConfigReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Multiplexing() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Multiplexing(Multiplexing other) : this() {
      maxConcurrency_ = other.maxConcurrency_ != null ? other.maxConcurrency_.Clone() : null;
      maxConnections_ = other.maxConnections_ != null ? other.maxConnections_.Clone() : null;
      cMaxReuseTimes_ = other.cMaxReuseTimes_ != null ? other.cMaxReuseTimes_.Clone() : null;
      cMaxLifetimeMs_ = other.cMaxLifetimeMs_ != null ? other.cMaxLifetimeMs_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Multiplexing Clone() {
      return new Multiplexing(this);
    }

    /// <summary>Field number for the "maxConcurrency" field.</summary>
    public const int MaxConcurrencyFieldNumber = 1;
    private global::Xray.Transport.Internet.SplitHttp.RandRangeConfig maxConcurrency_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Xray.Transport.Internet.SplitHttp.RandRangeConfig MaxConcurrency {
      get { return maxConcurrency_; }
      set {
        maxConcurrency_ = value;
      }
    }

    /// <summary>Field number for the "maxConnections" field.</summary>
    public const int MaxConnectionsFieldNumber = 2;
    private global::Xray.Transport.Internet.SplitHttp.RandRangeConfig maxConnections_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Xray.Transport.Internet.SplitHttp.RandRangeConfig MaxConnections {
      get { return maxConnections_; }
      set {
        maxConnections_ = value;
      }
    }

    /// <summary>Field number for the "cMaxReuseTimes" field.</summary>
    public const int CMaxReuseTimesFieldNumber = 3;
    private global::Xray.Transport.Internet.SplitHttp.RandRangeConfig cMaxReuseTimes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Xray.Transport.Internet.SplitHttp.RandRangeConfig CMaxReuseTimes {
      get { return cMaxReuseTimes_; }
      set {
        cMaxReuseTimes_ = value;
      }
    }

    /// <summary>Field number for the "cMaxLifetimeMs" field.</summary>
    public const int CMaxLifetimeMsFieldNumber = 4;
    private global::Xray.Transport.Internet.SplitHttp.RandRangeConfig cMaxLifetimeMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Xray.Transport.Internet.SplitHttp.RandRangeConfig CMaxLifetimeMs {
      get { return cMaxLifetimeMs_; }
      set {
        cMaxLifetimeMs_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Multiplexing);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Multiplexing other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(MaxConcurrency, other.MaxConcurrency)) return false;
      if (!object.Equals(MaxConnections, other.MaxConnections)) return false;
      if (!object.Equals(CMaxReuseTimes, other.CMaxReuseTimes)) return false;
      if (!object.Equals(CMaxLifetimeMs, other.CMaxLifetimeMs)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (maxConcurrency_ != null) hash ^= MaxConcurrency.GetHashCode();
      if (maxConnections_ != null) hash ^= MaxConnections.GetHashCode();
      if (cMaxReuseTimes_ != null) hash ^= CMaxReuseTimes.GetHashCode();
      if (cMaxLifetimeMs_ != null) hash ^= CMaxLifetimeMs.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (maxConcurrency_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(MaxConcurrency);
      }
      if (maxConnections_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(MaxConnections);
      }
      if (cMaxReuseTimes_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(CMaxReuseTimes);
      }
      if (cMaxLifetimeMs_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(CMaxLifetimeMs);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (maxConcurrency_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(MaxConcurrency);
      }
      if (maxConnections_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(MaxConnections);
      }
      if (cMaxReuseTimes_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(CMaxReuseTimes);
      }
      if (cMaxLifetimeMs_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(CMaxLifetimeMs);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (maxConcurrency_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MaxConcurrency);
      }
      if (maxConnections_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MaxConnections);
      }
      if (cMaxReuseTimes_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CMaxReuseTimes);
      }
      if (cMaxLifetimeMs_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CMaxLifetimeMs);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Multiplexing other) {
      if (other == null) {
        return;
      }
      if (other.maxConcurrency_ != null) {
        if (maxConcurrency_ == null) {
          MaxConcurrency = new global::Xray.Transport.Internet.SplitHttp.RandRangeConfig();
        }
        MaxConcurrency.MergeFrom(other.MaxConcurrency);
      }
      if (other.maxConnections_ != null) {
        if (maxConnections_ == null) {
          MaxConnections = new global::Xray.Transport.Internet.SplitHttp.RandRangeConfig();
        }
        MaxConnections.MergeFrom(other.MaxConnections);
      }
      if (other.cMaxReuseTimes_ != null) {
        if (cMaxReuseTimes_ == null) {
          CMaxReuseTimes = new global::Xray.Transport.Internet.SplitHttp.RandRangeConfig();
        }
        CMaxReuseTimes.MergeFrom(other.CMaxReuseTimes);
      }
      if (other.cMaxLifetimeMs_ != null) {
        if (cMaxLifetimeMs_ == null) {
          CMaxLifetimeMs = new global::Xray.Transport.Internet.SplitHttp.RandRangeConfig();
        }
        CMaxLifetimeMs.MergeFrom(other.CMaxLifetimeMs);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (maxConcurrency_ == null) {
              MaxConcurrency = new global::Xray.Transport.Internet.SplitHttp.RandRangeConfig();
            }
            input.ReadMessage(MaxConcurrency);
            break;
          }
          case 18: {
            if (maxConnections_ == null) {
              MaxConnections = new global::Xray.Transport.Internet.SplitHttp.RandRangeConfig();
            }
            input.ReadMessage(MaxConnections);
            break;
          }
          case 26: {
            if (cMaxReuseTimes_ == null) {
              CMaxReuseTimes = new global::Xray.Transport.Internet.SplitHttp.RandRangeConfig();
            }
            input.ReadMessage(CMaxReuseTimes);
            break;
          }
          case 34: {
            if (cMaxLifetimeMs_ == null) {
              CMaxLifetimeMs = new global::Xray.Transport.Internet.SplitHttp.RandRangeConfig();
            }
            input.ReadMessage(CMaxLifetimeMs);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (maxConcurrency_ == null) {
              MaxConcurrency = new global::Xray.Transport.Internet.SplitHttp.RandRangeConfig();
            }
            input.ReadMessage(MaxConcurrency);
            break;
          }
          case 18: {
            if (maxConnections_ == null) {
              MaxConnections = new global::Xray.Transport.Internet.SplitHttp.RandRangeConfig();
            }
            input.ReadMessage(MaxConnections);
            break;
          }
          case 26: {
            if (cMaxReuseTimes_ == null) {
              CMaxReuseTimes = new global::Xray.Transport.Internet.SplitHttp.RandRangeConfig();
            }
            input.ReadMessage(CMaxReuseTimes);
            break;
          }
          case 34: {
            if (cMaxLifetimeMs_ == null) {
              CMaxLifetimeMs = new global::Xray.Transport.Internet.SplitHttp.RandRangeConfig();
            }
            input.ReadMessage(CMaxLifetimeMs);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
